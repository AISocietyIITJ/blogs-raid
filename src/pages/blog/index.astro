---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { getCollection } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";

const posts = (await getCollection("blog"))
  .filter((post) => !post.data.draft)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <Header />
    <main class="mx-auto mb-20 w-full max-w-screen-xl px-6 md:px-10">
      <!-- Hero Section -->
      <section class="py-16 text-left md:py-20">
        <h1 class="text-4xl font-bold text-gray-800 md:text-5xl">Blogs</h1>
      </section>

      <!-- Blog Posts Grid -->
      <section class="mb-16">
        <ul class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-2">
          {
            posts.map((post) => (
              <li class="group">
                <a
                  href={`${import.meta.env.BASE_URL}/blog/${post.id}/`}
                  class="relative block overflow-hidden rounded-xl border border-gray-200 bg-white transition-all duration-300 hover:border-gray-300 hover:shadow-xl"
                >
                  {post.data.featured && (
                    <div class="absolute top-4 right-4 z-10">
                      <span class="rounded-full bg-yellow-500 px-3 py-1 text-xs font-semibold text-white shadow-md">
                        âœ¨ Featured
                      </span>
                    </div>
                  )}
                  <div class="relative aspect-[2/1] overflow-hidden rounded-t-xl">
                    <img
                      class="absolute inset-0 h-full w-full object-cover transition-transform duration-300 ease-in-out group-hover:scale-115"
                      src={post.data.heroImage}
                      alt={post.data.title}
                    />
                  </div>

                  <div class="p-6">
                    {post.data.tags && post.data.tags.length > 0 && (
                      <div class="mb-4 flex flex-wrap gap-2">
                        {post.data.tags.slice(0, 4).map((tag) => (
                          <span class="rounded-md border border-gray-200 px-2 py-1 text-xs text-gray-600 capitalize">
                            {tag}
                          </span>
                        ))}
                        {post.data.tags.length > 4 && (
                          <span class="self-center text-xs text-gray-500">
                            +{post.data.tags.length - 4} more
                          </span>
                        )}
                      </div>
                    )}
                    <h4 class="mb-3 line-clamp-2 text-xl font-semibold text-gray-800">
                      {post.data.title}
                    </h4>
                    <p class="text-sm font-medium text-gray-500">
                      <FormattedDate date={post.data.pubDate} />
                    </p>
                  </div>
                </a>
              </li>
            ))
          }
        </ul>
      </section>
    </main>
    <Footer />
  </body>
</html>

<style>
  /* Additional custom styles for better text truncation */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
